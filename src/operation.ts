import { OperationInfo, Link } from "./api";

export interface StartOperationOptions {
  abortSignal: AbortSignal;
  headers: Record<string, string>;
  /**
   * Callbacks are used to deliver completion of async operations.
   * This value may optionally be set by the client and should be called by a handler upon completion if the started
   * operation is async.
   */
  callbackURL: string;
  /**
   * Optional header fields set by a client that are required to be attached to the callback request when an
   * asynchronous operation completes.
   */
  callbackHeader: Record<string, string>;
  /**
   * Request ID that may be used by the server handler to dedupe a start request.
   * By default a v4 UUID will be generated by the client.
   */
  requestID: string;
  /**
   * Links contain arbitrary caller information. Handlers may use these links as metadata on resources associated with
   * and operation.
   */
  links: Link[];
}

export interface GetOperationInfoOptions {
  abortSignal: AbortSignal;
  headers: Record<string, string>;
}

export interface GetOperationResultOptions {
  abortSignal: AbortSignal;
  headers: Record<string, string>;
  wait: number;
}

export interface CancelOperationOptions {
  abortSignal: AbortSignal;
  headers: Record<string, string>;
}

/** A result that indicates that an operation completed successfully. */
export interface HandlerStartOperationResultSync<T> {
  value: T;
}

/** A result that indicates that an operation has been accepted and will complete asynchronously. */
export interface HandlerStartOperationResultAsync {
  // A token to identify the operation in followup handler methods such as {@link OperationHandler.getResult} and {@link
  // OperationHandler.cancel}.
  token: string;
}

// The return type from the {@link OperaitonHandler.start}. May be either a synchronous or asynchornous.
export type HandlerStartOperationResult<T> =
  | HandlerStartOperationResultSync<T>
  | HandlerStartOperationResultAsync;

export interface OperationHandler<I, O> {
  /**
   * Handles requests for starting an operation.
   *
   * Return {@link HandlerStartOperationResultSync} to respond successfully - inline, or
   * {@link HandlerStartOperationResultAsync} to indicate that an asynchronous operation was started. Throw a
   * {@link OperationError} to indicate that an operation completed as failed or canceled.
   */
  start(
    input: I,
    options: StartOperationOptions,
  ): Promise<HandlerStartOperationResult<O>>;

  /**
   * Handles requests to get the result of an asynchronous operation. Return non error result to respond successfully -
   * inline, or error with {@link OperationStillRunningError} to indicate that an asynchronous operation is still
   * running.
   *
   * Throw an {@link OperationError} to indicate that an operation completed as failed or canceled.
   *
   * When {@link GetOperationResultOptions.wait} is greater than zero, this request should be treated as a long poll.
   * Note that the specified wait duration may be longer than the configured client or server side request timeout, and
   * should be handled separately.
   *
   * It is the implementor's responsiblity to respect the client's wait duration and return in a timely fashion, leaving
   * enough time for the request to complete and the response to be sent back.
   *
   * @experimental
   */
  getResult(token: string, options: GetOperationResultOptions): Promise<O>;

  /**
   * GetInfo handles requests to get information about an asynchronous operation.
   *
   * @experimental
   */
  getInfo(
    token: string,
    options: GetOperationInfoOptions,
  ): Promise<OperationInfo>;

  /**
   * Handles requests to cancel an asynchronous operation.
   *
   * Cancelation in Nexus is:
   * 1. asynchronous - returning from this method only ensures that cancelation is delivered, it may later be
   * ignored by the underlying operation implemention.
   * 2. idempotent - implementors should ignore duplicate cancelations for the same operation.
   */
  cancel(token: string, options: CancelOperationOptions): Promise<void>;
}

export type SyncOperationHandler<I, O> = (
  input: I,
  options: StartOperationOptions,
) => Promise<O>;

/**
 * A named collection of operation handlers.
 */
export type Service = Record<
  string,
  OperationHandler<unknown, unknown> | SyncOperationHandler<unknown, unknown>
>;
