import { Link } from "../common";

/**
 * General handler context that is common to all handler methods.
 *
 * @experimental
 */
export interface OperationContext {
  /**
   * Name of the service that contains the operation.
   */
  readonly service: string;

  /**
   * Name of the operation.
   */
  readonly operation: string;

  /**
   * Request header fields.
   */
  readonly headers: Record<string, string>;

  /**
   * Signaled when the current request is canceled.
   */
  readonly abortSignal: AbortSignal;
}

/**
 * Context for the {@link OperationHandler.start} method.
 *
 * @experimental
 */
export interface StartOperationContext extends OperationContext {
  /**
   * Callbacks are used to deliver completion of async operations.
   * This value may optionally be set by the client and should be called by a handler upon completion if the started
   * operation is async.
   */
  readonly callbackURL?: string;

  /**
   * Optional header fields set by a client that are required to be attached to the callback request when an
   * asynchronous operation completes.
   */
  readonly callbackHeaders?: Record<string, string>;

  /**
   * Request ID that may be used by the server handler to dedupe a start request.
   * By default a v4 UUID will be generated by the client.
   */
  readonly requestId?: string;

  /**
   * Inbound links that contain arbitrary information, e.g. provided by the caller.
   * Used as metadata for the call.
   */
  readonly inboundLinks: Link[];

  /**
   * Outbound links that will be propagated back to the caller. A handler implementation may
   * mutate this array, e.g. by calling `push` directly, to attach additional links.
   */
  readonly outboundLinks: Link[];
}

/**
 * Context for the {@link OperationHandler.getInfo} method.
 *
 * @experimental
 */
export type GetOperationInfoContext = OperationContext;

/**
 * Context for the {@link OperationHandler.getResult} method.
 *
 * @experimental
 */
export interface GetOperationResultContext extends OperationContext {
  /**
   * If specified and non-zero, reflects the duration (in milliseconds) the caller has indicated that it wants to wait
   * for operation completion, turning the request into a long poll.
   */
  readonly timeoutMs: number | undefined;
}

/**
 * Context for the {@link OperationHandler.cancel} method.
 *
 * @experimental
 */
export type CancelOperationContext = OperationContext;
