// NOTE: this file should be exported separately as `nexus-rpc/transport` instead of the main `nexus-rpc` export.

import { Link, OperationInfo } from "../common";

interface StartOperationOptions {
  /** Request header fields. */
  readonly headers?: Record<string, string>;

  /** Signal to cancel an inflight request. */
  readonly abortSignal?: AbortSignal;

  /**
   * Callbacks are used to deliver completion of async operations.
   * This value may optionally be set by the client and should be called by a handler upon completion if the started
   * operation is async.
   */
  readonly callbackURL?: string;

  /**
   * Optional header fields set by a client that are required to be attached to the callback request when an
   * asynchronous operation completes.
   */
  readonly callbackHeaders?: Record<string, string>;

  /**
   * Request ID that may be used by the server handler to dedupe a start request.
   * By default a v4 UUID will be generated by the client.
   */
  readonly requestId?: string;

  /**
   * Inbound links that contain arbitrary information, e.g. provided by the caller.
   * Used as metadata for the call.
   */
  readonly links?: Link[];
}

interface CancelOperationOptions {
  /** Request header fields. */
  readonly headers?: Record<string, string>;

  /** Signal to cancel an inflight request. */
  readonly abortSignal?: AbortSignal;
}

interface GetOperationResultOptions {
  /** Request header fields. */
  readonly headers?: Record<string, string>;

  /** Signal to cancel an inflight request. */
  readonly abortSignal?: AbortSignal;

  /**
   * If specified and non-zero, reflects the duration (in milliseconds) the caller has indicated that it wants to wait
   * for operation completion, turning the request into a long poll.
   *
   * @experimental
   */
  readonly timeoutMs?: number;
}

interface GetOperationInfoOptions {
  /** Request header fields. */
  readonly headers?: Record<string, string>;

  /** Signal to cancel an inflight request. */
  readonly abortSignal?: AbortSignal;
}

export interface StartOperationResponseSync {
  isSync: true;
  readonly links: Link[];
  readonly result: unknown;
}

export interface StartOperationResponseAsync {
  isSync: false;
  readonly links: Link[];
  token: string;
}

export type StartOperationResponse = StartOperationResponseSync | StartOperationResponseAsync;

export interface GetOperationResultResponse {
  result: unknown;
  links: Link[];
}

export interface GetOperationInfoResponse {
  info: OperationInfo;
}

export interface CancelOperationResponse {
}

export interface Transport {
  startOperation(
    service: string,
    op: string,
    input: unknown,
    options: StartOperationOptions,
  ): Promise<StartOperationResponse>;

  getOperationResult(
    service: string,
    op: string,
    token: string,
    options: GetOperationResultOptions,
  ): Promise<GetOperationResultResponse>;

  getOperationInfo(
    service: string,
    op: string,
    token: string,
    options: GetOperationInfoOptions
  ): Promise<GetOperationInfoResponse>;

  cancelOperation(
    service: string,
    op: string,
    token: string,
    options: CancelOperationOptions
  ): Promise<CancelOperationResponse>;
}
